{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BS_model(stock_price, var, strike_price, r_f, ttm):\n",
    "    import scipy.stats\n",
    "    import numpy as np\n",
    "    from math import sqrt, exp\n",
    "    import pandas as pd\n",
    "    norm_dist = scipy.stats.norm(0, 1)\n",
    "    d1 = 1/(var * sqrt(ttm)) * (np.log(stock_price/strike_price) +(r_f + (var**2/2))*ttm)\n",
    "    d2 = d1 - var*sqrt(ttm)\n",
    "    \n",
    "    call_value = norm_dist.cdf(d1) * stock_price - norm_dist.cdf(d2) * strike_price * exp(-r_f * ttm)\n",
    "    put_value = strike_price * exp(-r_f * ttm) - stock_price + call_value\n",
    "    \n",
    "    delta_call = norm_dist.cdf(d1)\n",
    "    delta_put = norm_dist.cdf(d1) - 1\n",
    "    gamma = norm_dist.pdf(d1)/(stock_price * var * sqrt(ttm))\n",
    "    vega = stock_price * norm_dist.pdf(d1) * sqrt(ttm)\n",
    "    theta_call = -(stock_price * norm_dist.pdf(d1) * var)/(2*sqrt(ttm))- (r_f * strike_price * \n",
    "                                                                          norm_dist.cdf(d2) * exp(-r_f*ttm))\n",
    "    theta_put = -(stock_price * norm_dist.pdf(d1) * var)/(2*sqrt(ttm))+ (r_f * strike_price * \n",
    "                                                                          norm_dist.cdf(-d2) * exp(-r_f*ttm))\n",
    "    rho_call = strike_price * ttm * norm_dist.cdf(d2) * exp(-r_f * ttm)\n",
    "    rho_put = -strike_price * ttm * norm_dist.cdf(-d2) * exp(-r_f * ttm)\n",
    "    \n",
    "    price = [call_value, put_value]\n",
    "    delta = [delta_call, delta_put]\n",
    "    gamma = [gamma]*2\n",
    "    vega = [vega]*2\n",
    "    theta = [theta_call, theta_put]\n",
    "    rho = [rho_call, rho_put]\n",
    "    \n",
    "    output = [price, delta, gamma, vega, theta, rho]\n",
    "    col = ['Call', 'Put']\n",
    "    index = ['Price', 'Delta', 'Gamma', 'Vega', 'Theta', 'Rho']\n",
    "    \n",
    "    BS_df = pd.DataFrame(output, columns = col, index = index)\n",
    "    \n",
    "    return BS_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Call</th>\n",
       "      <th>Put</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Price</th>\n",
       "      <td>28.396882</td>\n",
       "      <td>2.478704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Delta</th>\n",
       "      <td>0.865809</td>\n",
       "      <td>-0.134191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gamma</th>\n",
       "      <td>0.006838</td>\n",
       "      <td>0.006838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vega</th>\n",
       "      <td>68.376158</td>\n",
       "      <td>68.376158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Theta</th>\n",
       "      <td>-2.087402</td>\n",
       "      <td>0.135053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rho</th>\n",
       "      <td>581.840371</td>\n",
       "      <td>-158.977849</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Call         Put\n",
       "Price   28.396882    2.478704\n",
       "Delta    0.865809   -0.134191\n",
       "Gamma    0.006838    0.006838\n",
       "Vega    68.376158   68.376158\n",
       "Theta   -2.087402    0.135053\n",
       "Rho    581.840371 -158.977849"
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stock_price = 100\n",
    "var = 0.1\n",
    "strike_price = 100\n",
    "r_f = 0.03\n",
    "ttm = 10\n",
    "\n",
    "BS_model(stock_price, var, strike_price, r_f, ttm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BS_sensitivity_plot(stock_price, var, strike_price, r_f, ttm, option_type = 'Call'):\n",
    "    def BS_model(stock_price, var, strike_price, r_f, ttm):\n",
    "        import scipy.stats\n",
    "        import numpy as np\n",
    "        from math import sqrt, exp\n",
    "        import pandas as pd\n",
    "        norm_dist = scipy.stats.norm(0, 1)\n",
    "        d1 = 1/(var * sqrt(ttm)) * (np.log(stock_price/strike_price) +(r_f + (var**2/2))*ttm)\n",
    "        d2 = d1 - var*sqrt(ttm)\n",
    "\n",
    "        call_value = norm_dist.cdf(d1) * stock_price - norm_dist.cdf(d2) * strike_price * exp(-r_f * ttm)\n",
    "        put_value = strike_price * exp(-r_f * ttm) - stock_price + call_value\n",
    "\n",
    "        delta_call = norm_dist.cdf(d1)\n",
    "        delta_put = norm_dist.cdf(d1) - 1\n",
    "        gamma = norm_dist.pdf(d1)/(stock_price * var * sqrt(ttm))\n",
    "        vega = stock_price * norm_dist.pdf(d1) * sqrt(ttm)\n",
    "        theta_call = -(stock_price * norm_dist.pdf(d1) * var)/(2*sqrt(ttm))- (r_f * strike_price * \n",
    "                                                                              norm_dist.cdf(d2) * exp(-r_f*ttm))\n",
    "        theta_put = -(stock_price * norm_dist.pdf(d1) * var)/(2*sqrt(ttm))+ (r_f * strike_price * \n",
    "                                                                              norm_dist.cdf(-d2) * exp(-r_f*ttm))\n",
    "        rho_call = strike_price * ttm * norm_dist.cdf(d2) * exp(-r_f * ttm)\n",
    "        rho_put = -strike_price * ttm * norm_dist.cdf(-d2) * exp(-r_f * ttm)\n",
    "\n",
    "        price = [call_value, put_value]\n",
    "        delta = [delta_call, delta_put]\n",
    "        gamma = [gamma]*2\n",
    "        vega = [vega]*2\n",
    "        theta = [theta_call, theta_put]\n",
    "        rho = [rho_call, rho_put]\n",
    "\n",
    "        output = [price, delta, gamma, vega, theta, rho]\n",
    "        col = ['Call', 'Put']\n",
    "        index = ['Price', 'Delta', 'Gamma', 'Vega', 'Theta', 'Rho']\n",
    "\n",
    "        BS_df = pd.DataFrame(output, columns = col, index = index)\n",
    "\n",
    "        return BS_df\n",
    "    import matplotlib.pyplot as plt\n",
    "    import numpy as np\n",
    "\n",
    "    %matplotlib inline\n",
    "\n",
    "    sen_stock = [BS_model(i, var, strike_price, r_f, ttm).loc['Price'][option_type] for i in np.arange(50,150)]\n",
    "    sen_strike = [BS_model(stock_price, var, i, r_f, ttm).loc['Price'][option_type] for i in np.arange(50,150)]\n",
    "    sen_var = [BS_model(stock_price, i, strike_price, r_f, ttm).loc['Price'][option_type] for i in np.arange(1,100)/100]\n",
    "    sen_r_f = [BS_model(stock_price, var, strike_price, i, ttm).loc['Price'][option_type] for i in np.arange(1,10)/100]\n",
    "    sen_time = [BS_model(stock_price, var, strike_price, r_f, i).loc['Price'][option_type] for i in np.arange(1,100)/10]\n",
    "\n",
    "\n",
    "    stock = np.arange(50,150)\n",
    "    strike = np.arange(50,150)\n",
    "    volatility = np.arange(1,100)/100\n",
    "    rf = np.arange(1,10)/100\n",
    "    time = np.arange(1,100)/10\n",
    "\n",
    "    plt.subplot(321)\n",
    "    plt.title('Sensitivity to Stock Price')\n",
    "    plt.ylabel('Option Price')\n",
    "    plt.xlabel('Stock Price')\n",
    "    plt.plot(stock,sen_stock )\n",
    "\n",
    "    plt.subplot(322)\n",
    "    plt.title('Sensitivity to Strike Price')\n",
    "    plt.ylabel('Option Price')\n",
    "    plt.xlabel('Strike Price')\n",
    "    plt.plot(stock,sen_strike)\n",
    "\n",
    "    plt.subplot(323)\n",
    "    plt.title('Sensitivity to Volatility')\n",
    "    plt.ylabel('Option Price')\n",
    "    plt.xlabel('Volatility')\n",
    "    plt.plot(volatility,sen_var)\n",
    "\n",
    "    plt.subplot(324)\n",
    "    plt.title('Sensitivity to Int rate')\n",
    "    plt.ylabel('Option Price')\n",
    "    plt.xlabel('Risk-Free Rate')\n",
    "    plt.plot(rf,sen_r_f)\n",
    "\n",
    "    plt.subplot(325)\n",
    "    plt.title('Sensitivity to Time')\n",
    "    plt.ylabel('Option Price')\n",
    "    plt.xlabel('Time to Maturity')\n",
    "    plt.plot(time,sen_time)\n",
    "\n",
    "    plt.subplots_adjust(top=0.99, bottom=0.01, left=0.01, right=0.99, hspace=0.8,\n",
    "                        wspace=0.2)\n",
    "    plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 5 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "stock_price = 100\n",
    "var = 0.1\n",
    "strike_price = 100\n",
    "r_f = 0.03\n",
    "ttm = 1\n",
    "BS_sensitivity_plot(stock_price, var, strike_price, r_f, ttm, option_type = 'Call')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
